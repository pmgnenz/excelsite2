<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Sample &#8211; Just another sample </title>

     <link rel="stylesheet" href="default.css">
     <link rel="shortcut icon" href="images/doshi-logo.64e5832c.png" /> 
     <script src="jquery-1.10.2.min.js" type="text/javascript"></script> 

     
</head>
<body onload="Upload()">
    <header class="headerid"> 
        <img src ="images/doshi-logo.64e5832c.png"  alt = "doshi-logo" width="30%"; />   
        <div id="nav-placeholder">

        </div>
        
        <script>
        $(function(){
          $("#nav-placeholder").load("common.html");
        });
        </script>
   </header>
   <br />
    <br />
    <input type="file" id="fileUpload" />
    <input type="button" id="upload" value="Upload" onclick="Upload()" />
    <hr />
    <div id="dvExcel">
    </div>
    <br />
    <br />
    <p id="comment"></p>
    <table id="exceltable">
    </table>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/xlsx.full.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/jszip.js"></script>
    
    <script type="text/javascript">
    
        function Upload() {
            //Reference the FileUpload element.
            var fileUpload = document.getElementById("fileUpload");
            var info;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/getxl.php'); // Change to your PHP file here
            xhr.onload = function() {
                if (xhr.status === 200) {
                    info = xhr.responseText;
                    alert(info);
                    console.log("datttttttt  ", info)
                } else {
                    alert('Request failed: ' + xhr.status);
                }
            };
            xhr.send();
            console.log("infoooooo", info);
            //Validate whether File is valid Excel file.
            var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
            if (regex.test(fileUpload.value.toLowerCase())) {
                if (typeof (FileReader) != "undefined") {
                    var reader = new FileReader();

                    //For Browsers other than IE.
                    if (reader.readAsBinaryString) {
                        reader.onload = function (e) {
                            ProcessExcel(e.target.result);
                        };
                        reader.readAsBinaryString(fileUpload.files[0]);
                    } else {
                        //For IE Browser.
                        reader.onload = function (e) {
                            var data = "";
                            var bytes = new Uint8Array(e.target.result);
                            for (var i = 0; i < bytes.byteLength; i++) {
                                data += String.fromCharCode(bytes[i]);
                            }
                            ProcessExcel(data);
                        };
                        reader.readAsArrayBuffer(fileUpload.files[0]);
                    }
                } else {
                    alert("This browser does not support HTML5.");
                }
            } else {
                alert("Please upload a valid Excel file.");
            }
        };
        function ec(r, c){
            return XLSX.utils.encode_cell({r:r,c:c});
        };

        function delete_row(ws, row_index){
            var variable = XLSX.utils.decode_range(ws["!ref"])
            for(var R = row_index; R <= variable.e.r; ++R){
                for(var C = variable.s.c; C <= variable.e.c; ++C){
                    ws[ec(R,C)] = ws[ec(R+1,C)];
        }
        }
        variable.e.r--
        ws['!ref'] = XLSX.utils.encode_range(variable.s, variable.e);
        };
        function BindTableHeader(jsondata, tableid) {/*Function used to get all column names from JSON and bind the html table header*/
                            var columnSet = [];
                            var headerTr$ = $('<tr/>');
                            for (var i = 0; i < jsondata.length; i++) {
                                var rowHash = jsondata[i];
                                for (var key in rowHash) {
                                    if (rowHash.hasOwnProperty(key)) {
                                        if ($.inArray(key, columnSet) == -1) {/*Adding each unique column names to a variable array*/
                                            columnSet.push(key);
                                            headerTr$.append($('<th/>').html(key));
                                        }
                                    }
                                }
                            }
                            $(tableid).append(headerTr$);
                            return columnSet;
                        };
        function BindTable(jsondata, tableid) {/*Function used to convert the JSON array to Html Table*/
                            var columns = BindTableHeader(jsondata, tableid); /*Gets all the column headings of Excel*/
                            console.log(columns);
                            for (var i = 0; i < jsondata.length; i++) {
                                var row$ = $('<tr/>');
                                for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                                    var cellValue = jsondata[i][columns[colIndex]];
                                    if (cellValue == null)
                                        cellValue = "";
                                    row$.append($('<td/>').html(cellValue));
                                }
                                $(tableid).append(row$);
                            }
                        };
        
        function ProcessExcel(data) {
            //Read the Excel File data.
            var workbook = XLSX.read(data, {
                type: 'binary'
            });

            //Fetch the name of First Sheet.
            var firstSheet = workbook.SheetNames[0];
            var sheet = workbook.Sheets[firstSheet]; // get the first worksheet

            var comment = "";
            var comarray = [];
            var range = XLSX.utils.decode_range(sheet['!ref']); // get the range
            for(var R = range.s.r; R <= range.e.r; ++R) {
              for(var C = range.s.c; C <= range.e.c; ++C) {
                /* find the cell object */
                //console.log('Row : ' + R);
                //console.log('Column : ' + C);
                
                var cellref = XLSX.utils.encode_cell({c:C, r:R}); // construct A1 reference for cell
                if(!sheet[cellref]) continue; // if cell doesn't exist, move on
                var cell = sheet[cellref];
                //console.log("cellllll", cellref);
                //console.log("typeof", typeof cell);

                var str = cell.v;
                for (var i = 0; i < str.length; i++) {
                    if (str[i]== '*') {
                        if(str[i+1] == '*'){
                            comment = str;
                            comarray.push(R);
                            break;
                        };
                    
                    };
                }
               
                
              };
            };
            for (var i = 0; i < comarray.length; i++) {
                console.log("commmmmmmn " ,comarray[i]);
                delete_row(sheet, comarray[i]); 
                delete_row(sheet, 0)    ;              
                };
            var ranges = XLSX.utils.decode_range(sheet['!ref']); // get the range
            for(var R = ranges.s.r; R <= ranges.e.r; ++R) {
              for(var C = ranges.s.c; C <= ranges.e.c; ++C) {
                /* find the cell object */
                //console.log('Row : ' + R);
                //console.log('Column : ' + C);
                var cellref = XLSX.utils.encode_cell({c:C, r:R}); // construct A1 reference for cell
                if(!sheet[cellref]) continue; // if cell doesn't exist, move on
                var cell = sheet[cellref];
                //console.log(cell.v);
                //console.log(typeof cell.v);
              };
            };
            //Read all rows from First Sheet into an JSON array.
            //console.log(workbook.Sheets[firstSheet])
            var excelRows = XLSX.utils.sheet_to_row_object_array(sheet, {blankrows: false});
            //console.log(excelRows);
            //Create a HTML Table element.
            if (excelRows.length > 0) {
                    BindTable(excelRows, '#exceltable');
            }
            document.getElementById("comment").innerHTML = comment;
            $('#exceltable').show();
        };
    </script>
</body>
</html>
